name: CI

on:
  pull_request:
  merge_group:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  test-forge-unit-and-integration:
    name: Test Forge / Unit and Integration Tests
    env:
      SCARB_VERSION: 2.3.0
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@a95ba195448af2da9b00fb742d14ffaaf3c21f43
      - uses: software-mansion/setup-scarb@v1.3.1
        with:
          scarb-version: ${{ env.SCARB_VERSION }}
      - run: cargo test --release --lib -p forge
      - run: cargo test --release integration -p forge

  test-forge-e2e:
    name: Test Forge / E2E Tests
    env:
      SCARB_VERSION: 2.3.0
    runs-on: ubuntu-latest
    steps:
      - name: Extract branch name
        if: github.event_name != 'pull_request'
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV

      - name: Extract branch name on pull request
        if: github.event_name == 'pull_request'
        run: echo "BRANCH_NAME=$(echo $GITHUB_HEAD_REF)" >> $GITHUB_ENV

      - name: Extract repo name and owner
        if: github.event_name != 'pull_request'
        run: echo "REPO_NAME=$(echo ${{ github.repository }}.git)" >> $GITHUB_ENV

      - name: Extract repo name and owner on pull request
        if: github.event_name == 'pull_request'
        run: echo "REPO_NAME=$(echo ${{ github.event.pull_request.head.repo.full_name }}.git)" >> $GITHUB_ENV

      - name: Print repo name
        run: echo 'The repo name is' $REPO_NAME

      - name: Get branch name
        run: echo 'The branch name is' $BRANCH_NAME

      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@a95ba195448af2da9b00fb742d14ffaaf3c21f43
      - uses: software-mansion/setup-scarb@v1.3.1
        with:
          scarb-version: ${{ env.SCARB_VERSION }}
      - run: cargo test --release e2e -p forge

  test-cheatnet:
    name: Test Cheatnet
    env:
      SCARB_VERSION: 2.3.0
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@a95ba195448af2da9b00fb742d14ffaaf3c21f43
      - uses: software-mansion/setup-scarb@v1.3.1
        with:
          scarb-version: ${{ env.SCARB_VERSION }}
      - name: Run Cheatnet tests
        run: cargo test -p cheatnet

  test-cast:
    name: Test Cast
    runs-on: ubuntu-latest
    env:
      SCARB_VERSION: 0.5.2
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: dtolnay/rust-toolchain@439cf607258077187679211f12aa6f19af4a0af7
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@a95ba195448af2da9b00fb742d14ffaaf3c21f43
      - name: Set starknet-devnet-rs rev
        id: devnet-rev
        run: |
          devnetrev=$(grep "DEVNET_REV=" ./scripts/prepare_for_tests.sh | awk -F '=' '{print $2}')
          echo "devnet_rev=${devnetrev//\"}" >> $GITHUB_OUTPUT
      - name: Cache starknet-devnet-rs
        id: cache-devnet
        uses: actions/cache@v3
        with:
          path: ./crates/cast/tests/utils/devnet
          key: starknet-devnet-rs-${{ steps.devnet-rev.outputs.devnet_rev }}
      - name: Install starknet-devnet-rs
        if: steps.cache-devnet.outputs.cache-hit != 'true'
        run: ./scripts/prepare_for_tests.sh
      - uses: software-mansion/setup-scarb@v1.3.1
        with:
          scarb-version: ${{ env.SCARB_VERSION }}
      - name: Prepare for tests
        run: |
          ./scripts/prepare_for_tests.sh
      - name: Run tests
        run: cargo test --release -p cast

  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: dtolnay/rust-toolchain@439cf607258077187679211f12aa6f19af4a0af7
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@a95ba195448af2da9b00fb742d14ffaaf3c21f43
      - name: Check forge formatting
        run: cargo fmt --check -p forge
      - name: Check cast formatting
        run: cargo fmt --check -p cast
      - name: Check test-collector formatting
        run: cargo fmt --check -p test-collector
      - name: Check cheatnet formatting
        run: cargo fmt --check -p cheatnet

  clippy:
    runs-on: ubuntu-latest
    env:
      # Make sure CI fails on all warnings - including Clippy lints.
      RUSTFLAGS: "-Dwarnings"
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: dtolnay/rust-toolchain@439cf607258077187679211f12aa6f19af4a0af7
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@a95ba195448af2da9b00fb742d14ffaaf3c21f43
      - run: cargo lint

  build-docs:
    name: Test Building Docs
    runs-on: ubuntu-latest
    env:
      MDBOOK_VERSION: 0.4.31
    steps:
      - uses: dtolnay/rust-toolchain@439cf607258077187679211f12aa6f19af4a0af7
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@a95ba195448af2da9b00fb742d14ffaaf3c21f43
      - uses: actions/checkout@v4
      - name: Install mdBook
        run: |
          cargo install --version ${MDBOOK_VERSION} mdbook
      - name: Build with mdBook
        run: mdbook build
        working-directory: ./docs
