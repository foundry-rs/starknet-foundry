name: Publish snforge_scarb_plugin

on:
  workflow_call:
    inputs:
      dev_registry:
        required: false
        type: boolean
        default: false
      override_plugin_version:
        required: false
        type: string

  workflow_dispatch:
    inputs:
      dev_registry:
        required: false
        type: boolean
        default: false
      override_plugin_version:
        required: false
        type: string
      build_plugin_binaries:
        required: false
        type: boolean
        default: false

jobs:
  check-version:
    name: Check snforge_scarb_plugin Version
    runs-on: ubuntu-latest
    outputs:
      plugin_uploaded: ${{ steps.check-version.outputs.plugin_uploaded }}
    steps:
      - uses: actions/checkout@v4
      - name: Check version
        id: check-version
        run: |
          set -exo pipefail

          if [ -z "${{ inputs.override_plugin_version }}" ]; then
            snforge_scarb_plugin_version=$(grep version crates/snforge-scarb-plugin/Scarb.toml | cut -d '"' -f 2)
          else
            snforge_scarb_plugin_version="${{ inputs.override_plugin_version }}"
          fi
          plugin_uploaded=$(curl -s https://scarbs.xyz/api/v1/index/sn/fo/snforge_scarb_plugin.json | jq --arg version "$snforge_scarb_plugin_version" '[.[] | select(.v == $version)] | length > 0')
          echo "plugin_uploaded=$plugin_uploaded" >> $GITHUB_OUTPUT

  build-binaries:
    name: Build Plugin Binaries
    needs: check-version
    if: inputs.build_plugin_binaries == true
    uses: ./.github/workflows/_build-plugin-binaries.yml
    with:
      override_plugin_version: ${{ inputs.override_plugin_version != '' && inputs.override_plugin_version || '' }}


  upload-to-registry:
    name: Upload snforge_scarb_plugin to the registry
    runs-on: ubuntu-latest
    if: |
      always() && 
      (needs.check-version.result == 'success') && 
      (inputs.build_plugin_binaries == false || needs.build-binaries.result == 'success')
    needs: [check-version, build-binaries]
    env:
      SCARB_REGISTRY_AUTH_TOKEN: ${{ inputs.dev_registry == true && secrets.DEV_SCARB_REGISTRY_AUTH_TOKEN || secrets.SCARB_REGISTRY_AUTH_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: software-mansion/setup-scarb@v1
        with:
          # TODO(#3144) Remove
          scarb-version: "2.11.0"

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts-dl

      - name: Unpack artifacts to target directory
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p crates/snforge-scarb-plugin/target/scarb/cairo-plugin
          
          mv artifacts-dl/build-plugin-*/snforge_scarb_plugin_* crates/snforge-scarb-plugin/target/scarb/cairo-plugin/

      - name: Publish snforge_scarb_plugin
        if: needs.check-version.outputs.plugin_uploaded == 'false' || github.event_name == 'workflow_dispatch'
        working-directory: crates/snforge-scarb-plugin
        run: |
          set -exo pipefail
          
          if [ -n "${{ inputs.override_plugin_version }}" ]; then
            sed -i.bak "/\[package\]/,/version =/ s/version = \".*/version = \"${{ inputs.override_plugin_version }}\"/" Scarb.toml
            rm Scarb.toml.bak 2> /dev/null

            sed -i.bak "/\[package\]/,/version =/ s/version = \".*/version = \"${{ inputs.override_plugin_version }}\"/" Cargo.toml
            rm Cargo.toml.bak 2> /dev/null
          fi

          scarb publish --allow-dirty ${{ inputs.dev_registry == true && '--index https://scarbs.dev/' || '' }}
