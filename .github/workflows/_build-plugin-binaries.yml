name: Build snforge_scarb_plugin

on:
  workflow_call:
    inputs:
      # Specify the version in MAJOR.MINOR.PATCH format, without a leading 'v'
      overridden_plugin_version:
        required: false
        type: string
      ref:
        required: false
        type: string
      plugin_name:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      # Specify the version in MAJOR.MINOR.PATCH format, without a leading 'v'
      overridden_plugin_version:
        required: false
        type: string
      plugin_name:
        required: true
        type: string

jobs:
  build-binaries:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    env:
      # Cross-compiled targets will override this to `cross`.
      CARGO: cargo

    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            # Use cross to link oldest GLIBC possible.
            cross: true
            lib-name-prefix: "lib"
            ext: "so"

          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            cross: true
            lib-name-prefix: "lib"
            ext: "so"

          - target: x86_64-apple-darwin
            os: macos-latest
            lib-name-prefix: "lib"
            ext: "dylib"

          - target: aarch64-apple-darwin
            os: macos-latest
            lib-name-prefix: "lib"
            ext: "dylib"

          # The scarb builds for following platforms are experimental and not officially supported by starknet-foundry.
          # https://docs.swmansion.com/scarb/download.html#platform-support
          # Reference issue: TODO(#2886)

          # - target: aarch64-unknown-linux-musl
          #   os: ubuntu-latest
          #   cross: true
          #   ext: "so"

          # - target: x86_64-unknown-linux-musl
          #   os: ubuntu-latest
          #   cross: true
          #   ext: "so"

    steps:
      - name: Checkout with ref
        if: inputs.ref != ''
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Checkout default
        if: inputs.ref == ''
        uses: actions/checkout@v4

      - name: Setup rust
        run: |
          rustup target add ${{ matrix.target }}

      - uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6

      - name: Install cross
        if: matrix.cross
        uses: taiki-e/install-action@cross

      - name: Enable cross-compilation
        if: matrix.cross
        shell: bash
        run: |
          echo "CARGO=cross" >> $GITHUB_ENV

      - name: Build
        working-directory: crates/${{ inputs.plugin_name }}
        run: ${{ env.CARGO }} build --release --locked --target ${{ matrix.target }}

      - name: Rename Binary
        shell: bash
        run: |
          set -euxo pipefail
          
          source scripts/handle_version.sh
          
          PACKAGE_NAME=${{ inputs.plugin_name }}
          PACKAGE_NAME=${PACKAGE_NAME//-/_}  # Replace `-` with `_` in name
          PACKAGE_VERSION=$(get_version "${{ inputs.overridden_plugin_version }}" "crates/${{ inputs.plugin_name }}/Scarb.toml")

          TARGET="${{ matrix.target }}"
          EXT="${{ matrix.ext }}"
          LIB_NAME="${{ matrix.lib-name-prefix }}${PACKAGE_NAME}"

          OUTPUT_BINARY="${PACKAGE_NAME}_v${PACKAGE_VERSION}_${TARGET}.${EXT}"

          mv ./crates/${{ inputs.plugin_name }}/target/${TARGET}/release/${LIB_NAME}.${EXT} ./crates/${{ inputs.plugin_name }}/target/${TARGET}/release/${OUTPUT_BINARY}

          echo "OUTPUT_BINARY_PATH=./crates/${{ inputs.plugin_name }}/target/${TARGET}/release/${OUTPUT_BINARY}" >> $GITHUB_ENV

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ inputs.plugin_name }}-${{ matrix.target }}
          path: ${{ env.OUTPUT_BINARY_PATH }}
          compression-level: 0
