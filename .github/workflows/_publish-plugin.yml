name: Upload plugin to registry

on:
  workflow_call:
    inputs:
      prod_registry:
        required: false
        type: boolean
      # Specify the version in MAJOR.MINOR.PATCH format, without a leading 'v'
      overridden_plugin_version:
        required: false
        type: string
      plugin_name:
        required: true
        type: string

jobs:
  check-uploaded:
    name: Check ${{ inputs.plugin_name }} Version
    runs-on: ubuntu-latest
    outputs:
      plugin_uploaded: ${{ steps.check-uploaded.outputs.plugin_uploaded }}
    steps:
      - uses: actions/checkout@v4
      - name: Check version
        id: check-uploaded
        run: |
          set -exo pipefail
        
          source scripts/handle_version.sh
          
          plugin_name_underscores=${{ inputs.plugin_name }}
          plugin_name_underscores=${plugin_name_underscores//-/_}
          plugin_version=$(get_version "${{ inputs.overridden_plugin_version }}" "crates/${{ inputs.plugin_name }}/Scarb.toml")
          
          registry_url=${{ inputs.prod_registry == true && 'https://scarbs.xyz' || 'https://scarbs.dev' }}
          plugin_uploaded=$(curl -s ${registry_url}/api/v1/index/sn/fo/${plugin_name_underscores}.json | jq --arg version "$plugin_version" '[.[] | select(.v == $version)] | length > 0')
          echo "plugin_uploaded=$plugin_uploaded" >> $GITHUB_OUTPUT

  upload-to-registry:
    name: Upload ${{ inputs.plugin_name }} to the registry
    runs-on: ubuntu-latest
    needs: [check-uploaded]
    env:
      SCARB_REGISTRY_AUTH_TOKEN: ${{ inputs.prod_registry == true && secrets.SCARB_REGISTRY_AUTH_TOKEN || secrets.DEV_SCARB_REGISTRY_AUTH_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: software-mansion/setup-scarb@v1

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts-dl

      - name: Unpack artifacts to target directory
        run: |
          set -euxo pipefail
          
          plugin_name_underscores=${{ inputs.plugin_name }}
          plugin_name_underscores=${plugin_name_underscores//-/_}
          
          mkdir -p crates/${{ inputs.plugin_name }}/target/scarb/cairo-plugin
          mv artifacts-dl/build-*/${plugin_name_underscores}_v* crates/${{ inputs.plugin_name }}/target/scarb/cairo-plugin/
          
          # Required for testing prebuild plugin while creating release.
          if [[ -n "${{ inputs.overridden_plugin_version }}" ]]; then
            cd crates/${{ inputs.plugin_name }}/target/scarb/cairo-plugin/
            overridden_version="${{ inputs.overridden_plugin_version }}"

            for file in ${plugin_name_underscores}_v*; do
              if [[ -f "$file" && ! "$file" =~ "${plugin_name_underscores}_v${overridden_version}" ]]; then
                platform=$(echo "$file" | sed -E "s/${plugin_name_underscores}_v[0-9]+\.[0-9]+\.[0-9]+([-.].*)?_(.+)/\2/")
                new_file="${plugin_name_underscores}_v${overridden_version}_${platform}"
                mv "$file" "$new_file"
              fi
            done
          fi

      - name: Publish ${{ inputs.plugin_name }}
        if: needs.check-uploaded.outputs.plugin_uploaded == 'false'
        working-directory: crates/${{ inputs.plugin_name }}
        run: |
          set -exo pipefail
          source ../../scripts/handle_version.sh
          
          update_version_in_file "Scarb.toml" "${{ inputs.overridden_plugin_version }}"
          update_version_in_file "Cargo.toml" "${{ inputs.overridden_plugin_version }}"

          scarb publish --allow-dirty ${{ inputs.prod_registry == true && ' ' || '--index https://scarbs.dev/' }} ${{ inputs.overridden_plugin_version == 'snforge-scarb-plugin-deprecated' && '--ignore-cairo-version' || ' ' }} 
